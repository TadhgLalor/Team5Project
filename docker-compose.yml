services:
  mysql:
    image: mysql
    container_name: mysql-container
    environment:
      MYSQL_ROOT_PASSWORD: root # Sets the password for the root user.
      MYSQL_DATABASE: operatorwebapp # Creates a database with the specified name.
      MYSQL_USER: user # Creates a user with the specified name.
      MYSQL_PASSWORD: password # Sets the password for the created user.
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - app-network

  app:
    image: openjdk:11-jdk
    container_name: operatorwebapp-container
    build:
      context: ./OperatorWebApp
      dockerfile: Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/operatorwebapp
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
    ports:
      - "8080:8080"
    depends_on:
      - mysql
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - app-network
    volumes:
      - /var/lib/zookeeper # anonymous volumes are automatically removed when the container is stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app-network
    volumes:
      - /var/lib/kafka/data # anonymous volumes are automatically removed when the container is stopped

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8099:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: true
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mysql-data:


# USE: docker-compose down -v # ensure any existing volumes are removed

# docker-compose up -d # -d to minimize output
# docker-compose down # will discard the containers
# docker-compose stop # does NOT remove containers
# docker network prune -f # Remove any unused networks
# docker volume prune -f # Remove any unused volumes
# docker container prune
# docker volume prune
# docker ps
# docker exec -it
# kafka-console-producer --broker-list kafka:9092 --topic test_topic sh
# kafka-console-consumer --bootstrap-server kafka:9092 --topic test_topic --from-beginning