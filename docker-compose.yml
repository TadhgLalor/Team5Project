
services:
#  alpine:
#    image: alpine:latest
#    container_name: alpine_container
#    command: tail -f /dev/null # This command keeps the container running

  # 1
  mysql:
    image: mysql
    container_name: mysql-container
    environment:
      MYSQL_ROOT_PASSWORD: root # Sets the password for the root user.
      MYSQL_DATABASE: call_faults_db # Creates a database with the specified name.
      MYSQL_USER: user # Creates a user with the specified name.
      MYSQL_PASSWORD: password # Sets the password for the created user.
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql

  # 2
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  # 3
  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - /Users/danjiehu/kafka-scripts:/scripts
    command: "sh -c '(/scripts/create-topic.sh) & /etc/confluent/docker/run'"

  # 4
  producer-app:
    image: openjdk:11-jdk
    container_name: producer-container
    build:
      context: ./kafka-producer
      dockerfile: Dockerfile
    ports:
      - "8081:8081"

  # 5
  consumer-app:
    image: openjdk:11-jdk
    container_name: consumer-container
    build:
      context: ./kafka-consumer
      dockerfile: Dockerfile
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-container:3306/call_faults_db
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=password
#    environment:
#      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/call_faults_db?autoReconnect=true&useSSL=false
#      - SPRING_DATASOURCE_USERNAME=user
#      - SPRING_DATASOURCE_PASSWORD=password
#      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
#      - SPRING_JPA_SHOW_SQL=true
#      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.MySQLDialect
    ports:
      - "8082:8082"

  # 6
#  operator-app:
#    image: openjdk:11-jdk
#    container_name: operatorapp-container
#    build:
#      context: ./OperatorWebApp
#      dockerfile: Dockerfile
#    environment:
#      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-container/call_faults_db
#      - SPRING_DATASOURCE_USERNAME=user
#      - SPRING_DATASOURCE_PASSWORD=password
#    ports:
#      - "8080:8080"
#    depends_on:
#      - mysql
#      - consumer-app
#    networks:
#      - app-network

#    kafka-ui:
#      container_name: kafka-ui
#      image: provectuslabs/kafka-ui:latest
#      ports:
#        - 8099:8080
#      environment:
#        DYNAMIC_CONFIG_ENABLED: true
#        KAFKA_CLUSTERS_0_NAME: local
#        KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
#        KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
#      networks:
#        - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mysql-data:


  # USE: docker-compose down -v # ensure any existing volumes are removed

  # docker-compose up -d # -d to minimize output
  # docker-compose down # will discard the containers
  # docker-compose stop # does NOT remove containers
  # docker network prune -f # Remove any unused networks
  # docker volume prune -f # Remove any unused volumes
  # docker container prune
  # docker volume prune
  # docker ps
  # docker exec -it
  # kafka-console-producer --broker-list kafka:9092 --topic test_topic sh
  # kafka-console-consumer --bootstrap-server kafka:9092 --topic test_topic --from-beginning